# -*- coding: utf-8 -*-
"""Estudo de Caso

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OZM70lxO_sMCKze3EJoiBMA0Bbvm5oTM

Trabalho 2 - Estudo de Caso
Grupo: Gabriel Luis De Andrade Carvalho e Joana Luiza Leal Almeida

Carregamento e Preparação dos Dados
"""

import pandas as pd
import kagglehub
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.pipeline import Pipeline

# Baixando, Carregandoo e Inspecionando o dataset

path = kagglehub.dataset_download("geomack/spotifyclassification")
print("Path to dataset files:", path)

df = pd.read_csv(f"{path}/data.csv")

print(df.head())
print(df.info())

X = df.drop("target", axis=1)
y = df["target"]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.8, random_state=42)

# Identificando tipos de colunas e Criando o transformador de colunas

num_cols = X.select_dtypes(include=["int64", "float64"]).columns
cat_cols = X.select_dtypes(include=["object", "category"]).columns

preprocessor = ColumnTransformer(
    transformers=[
        ("num", StandardScaler(), num_cols),
        ("cat", OneHotEncoder(handle_unknown="ignore"), cat_cols)
    ]
)

# Aplicando o pré-processamento nos dados de treino e teste
X_train_processed = preprocessor.fit_transform(X_train)
X_test_processed = preprocessor.transform(X_test)

print("Shape dos dados processados:")
print("X_train:", X_train_processed.shape)
print("X_test:", X_test_processed.shape)

"""K-Nearest Neighbors (KNN)"""

from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, classification_report

accuracies_knn = []

for i in range(10):
    knn = KNeighborsClassifier()
    knn.fit(X_train_processed, y_train)
    y_pred = knn.predict(X_test_processed)
    acc = accuracy_score(y_test, y_pred)
    accuracies_knn.append(acc)
    print(f"Run {i+1} - Accuracy: {acc:.4f}")

print(f"\nKNN - Média das acurácias: {np.mean(accuracies_knn):.4f} ± {np.std(accuracies_knn):.4f}")

"""Support Vector Machine (SVM)"""

from sklearn.svm import SVC
from sklearn.metrics import accuracy_score

accuracies_svm = []

for i in range(10):
    svm = SVC()
    svm.fit(X_train_processed, y_train)
    y_pred = svm.predict(X_test_processed)
    acc = accuracy_score(y_test, y_pred)
    accuracies_svm.append(acc)
    print(f"Run {i+1} - Accuracy: {acc:.4f}")

print(f"\nSVM - Média das acurácias: {np.mean(accuracies_svm):.4f} ± {np.std(accuracies_svm):.4f}")

"""Random Forest (RF)"""

from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

accuracies_rf = []

for i in range(10):
    rf = RandomForestClassifier(random_state=i)  # random_state varia pra cada teste
    rf.fit(X_train_processed, y_train)
    y_pred = rf.predict(X_test_processed)
    acc = accuracy_score(y_test, y_pred)
    accuracies_rf.append(acc)
    print(f"Run {i+1} - Accuracy: {acc:.4f}")

print(f"\nRandom Forest - Média das acurácias: {np.mean(accuracies_rf):.4f} ± {np.std(accuracies_rf):.4f}")

"""XGBoost"""

from xgboost import XGBClassifier
from sklearn.metrics import accuracy_score

accuracies_xgb = []

for i in range(10):
    xgb = XGBClassifier(eval_metric='logloss', random_state=i)
    xgb.fit(X_train_processed, y_train)
    y_pred = xgb.predict(X_test_processed)
    acc = accuracy_score(y_test, y_pred)
    accuracies_xgb.append(acc)
    print(f"Run {i+1} - Accuracy: {acc:.4f}")

print(f"\nXGBoost - Média das acurácias: {np.mean(accuracies_xgb):.4f} ± {np.std(accuracies_xgb):.4f}")

"""Comparação"""

import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

# Dicionário os resultados e Convertendo para DataFrame pra visualização suave
results = {
    "KNN": accuracies_knn,
    "SVM": accuracies_svm,
    "Random Forest": accuracies_rf,
    "XGBoost": accuracies_xgb
}

results_df = pd.DataFrame(results)

print("\n=== MÉTRICAS DE DESEMPENHO DOS MODELOS ===")
print(results_df.describe().T[["mean", "std"]].rename(columns={"mean": "Média", "std": "Desvio Padrão"}))

# Visualização gráfica
plt.figure(figsize=(10, 6))
sns.boxplot(data=results_df)
plt.title("Comparação de Acurácia entre os Modelos (10 Execuções)")
plt.ylabel("Acurácia")
plt.xlabel("Modelos")
plt.grid(True)
plt.show()

plt.figure(figsize=(10, 6))
for modelo in results_df.columns:
    plt.plot(results_df.index, results_df[modelo], marker='o', label=modelo)

plt.title("Acurácia por Execução (10 Execuções)")
plt.xlabel("Execução")
plt.ylabel("Acurácia")
plt.legend()
plt.grid(True)
plt.show()